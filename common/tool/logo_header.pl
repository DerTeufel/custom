#!/usr/bin/perl -w
#
#****************************************************************************/
#* This script will generate logo header for the correct index of logo 
#* Author: LiangBo
#* 
#****************************************************************************/
$PROJECT = $ENV{PROJECT};
$FULL_PROJECT = $ENV{FULL_PROJECT};
my $LOGO_INDEX_DEFINE_H_NAME = "mediatek/custom/$PROJECT/common/logo_index.h";
my $CUSTOM_OUT_COMMON = "mediatek/custom/out/$FULL_PROJECT/common";
#****************************************************************************
# Included Modules
#****************************************************************************
	my @array = @ARGV;
	my @offset;
	my $index = 0;
	my $count = $#array + 1;
	unless(-e "mediatek/custom/$PROJECT/common/"){
		mkdir("mediatek/custom/$PROJECT/common/",0777);
	}

	if (-e $LOGO_INDEX_DEFINE_H_NAME)
	{
		`chmod 777 $LOGO_INDEX_DEFINE_H_NAME`;
	}
	open (LOGO_INDEX_DEFINE_H_NAME, ">$LOGO_INDEX_DEFINE_H_NAME") or &error_handler("LOGO_INDEX open LOGO_INDEX_DEFINE_H_NAME fail!\n", __FILE__, __LINE__);

#write header start
	print LOGO_INDEX_DEFINE_H_NAME &copyright_file_header_for_c();
	print LOGO_INDEX_DEFINE_H_NAME "\n#ifndef __LOGO_INDEX_DEFINE_H__\n#define __LOGO_INDEX_DEFINE_H__\n\n" ;

	print LOGO_INDEX_DEFINE_H_NAME "#define LOGO_RESOLUTION_COUNT\t($count)\n";
	for($index = 0;$index <= $#array;$index++)
{
	$offset[$index] = $index * 39;
	printf LOGO_INDEX_DEFINE_H_NAME "#define LOGO_INDEX_%s\t($offset[$index])\n",uc($array[$index]);
	
	print "$array[$index] offset=$offset[$index]\n";
}

	
	print LOGO_INDEX_DEFINE_H_NAME "inline int getIndex_of_logo(char *type){\n";
	print LOGO_INDEX_DEFINE_H_NAME "\tprintf(\"getIndex_of_logo(\%s)\\n\",type);\n";
	print LOGO_INDEX_DEFINE_H_NAME "\tint i = 0;\n";
	print LOGO_INDEX_DEFINE_H_NAME "\tfor(i = 0;i < LOGO_RESOLUTION_COUNT; i++){\n";
	for($index = 0;$index <= $#array;$index++)
{
	printf LOGO_INDEX_DEFINE_H_NAME "\t\tif(!strcmp(type, \"%s\"))\n",$array[$index];
	printf LOGO_INDEX_DEFINE_H_NAME "\t\t	return LOGO_INDEX_%s;\n",uc($array[$index]);
}

	printf LOGO_INDEX_DEFINE_H_NAME "\t}\n";
	print LOGO_INDEX_DEFINE_H_NAME "\treturn 0;\n";
	print LOGO_INDEX_DEFINE_H_NAME "}\n\n";

	print LOGO_INDEX_DEFINE_H_NAME &size2type_func_c();


	print LOGO_INDEX_DEFINE_H_NAME "#endif\n\n";
   	close LOGO_INDEX_DEFINE_H_NAME ;

	unless(-e $CUSTOM_OUT_COMMON){
		{`mkdir -p $CUSTOM_OUT_COMMON`;}	
	}
	{`cp $LOGO_INDEX_DEFINE_H_NAME $CUSTOM_OUT_COMMON`;}


#****************************************************************************
# subroutine:  copyright_file_header_for_c
# return:      file header -- copyright
#****************************************************************************
sub copyright_file_header_for_c()
{
    my $template = <<"__TEMPLATE";
/*
 * Copyright (C) 2012-2013 
 * Date: 2014/04/29
 * Authors: liangbo <liangbo_sky\@126.com>
 * 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 */
/*****************************************************************************
 *============================================================================
 * WARNING!!!  WARNING!!!   WARNING!!!  WARNING!!!  WARNING!!!  WARNING!!! 
 * This file is generated by hwinfogen Tool.
 * Please do not modify the content directly!
 * It could be overwritten!
 *============================================================================
 ****************************************************************************/
__TEMPLATE

   return $template;
}

#****************************************************************************
# subroutine:  size2type_func_c
# return:      file header -- copyright
#****************************************************************************
sub size2type_func_c()
{
    my $template = <<"__TEMPLATE";
inline char* size2type(int size)
{
	switch(size){
	case 1080:
		return "fhd";
	case 720:
		return "hd720";
	case 480:
		return "fwvga";
	case 540:
		return "qhd";
	case 800:		
		return "wvga";
	case 320:
		return "hvga";	
	case 240:
		return "qvga";
	case 1024:
		return "wsvga";
	default:
		return "wvga";
	}
}
__TEMPLATE

   return $template;
}

